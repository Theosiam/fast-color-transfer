function [R] = color_transfer(T,mS,mT,sT,sS,pS,pT)
    
    % -Η συνάρτηση αυτή υλοποιεί τη διαδικασία αναχρωματισμού της εικόνας 
    % στόχου, οι μεταβλητές που χρειάζονται για τη διαδικασία αυτή 
    % περιέχουν τις τιμές mean των cluster των εικόνων στόχου και πηγής
    % (mS -> Source , mT -> Target) και τη τιμή standard deviation της 
    % εικόνας στόχου ( sT )
    % Ο τύπος για τη μεταφορά χρώματος:
    %                          RL(i,j)=TL(i,j)
    %              Rα(i,j)= ((Tα(i,j)-μΤα(I))/σΤα(I))+μSα(Ι)
    %              Rβ(i,j)= ((Tβ(i,j)-μΤβ(I))/σΤβ(I))+μSβ(Ι)
    % ------------------------Είσοδοι (Inputs)----------------------------
    % T: η εικόνα στόχος σε RGB μορφή.
    % mS: μεταβλητή που περιέχει τις τιμές mean των cluster της εικονας
    % πηγής.
    % mT: μεταβλητή που περιέχει τις τιμές mean των cluster της εικονας
    % στόχου.
    % sT: μεταβλητή που περιέχει τις τιμές standard deviation των cluster   
    % της εικονας στόχου.
    %---------------------------------------------------------------------
    
    a=1;
    mS3=[[(mS+128)/(255)] pS*a];
    mT3=[[(mT+128)/(255)] pT*a];
    
    M=color_matching(mS3,mT3);
    
    %Μετατροπή της εικόνας στόχου σε Lαβ.
    T=rgb2lab(T);
    
    %Στις μεταβλητές L,a,b κρατάμε τις τιμές L* α* β* για κάθε pixel της 
    %εικόνας στόχου
    L=T(:,:,1);
    a=T(:,:,2);
    b=T(:,:,3);
    
    sizes=size(T);
    a_rec=zeros(sizes(1),sizes(2));
    b_rec=a_rec;
    
    for i=1:sizes(1)
        for j=1:sizes(2)
            
            dS_temp=1000;
            dT_temp=1000;
            idxS=1;
            idxT=1;
            
            %Στις 2 επαναληπτικές διαδικασίες (for) που ακολουθούν 
            %αναζητούμε τις τιμές idxS και idxT που έιναι οι δείκτες 
            %που δείχνουν σε ποιόν cluster ανοικεί το pixel της εικόνας 
            %προς μετατροπή. Ο δείκτης idxS αφορά τους cluster της εικόνας 
            %πηγής (source image) ενώ ο δείκτης idxT αυτους της εικόνας 
            %στόχου (target image).
            %Αυτό γίνεται ελέγχοντας την χρωματική απόσταση (με βάση τα
            %χαρακτηριστικά α* και β*) της εικόνας στόχου απο κέντρα των 
            %cluster που έχουμε δημιουργήσει. Επιλέγουμε τη μικρότερη. 
            %Οι μεταβλητές που κρατάνε τις αποστάσεις αυτές είναι οι
            %diffS & diffT.
            
            X=[a(i,j) b(i,j)];
           
            Len=size(mT);           
            for l=1:Len(1)
                
                dT=norm(X-mT(l,:));
                if dT<dT_temp
                    dT_temp=dT;
                    idxT=l;
                end    
            end
            
            idxS=M(idxT);
           
            %Εφαρμογή του τύπου αναχρωματισμού για τις τιμές α* & β*.
            %Αφού εχουμε βρεί τους δείκτες που μας δείχνουν σε ποιές
            %κλάσεις ανήκει κάθε pixel (όπως περιγράψαμε πιο πάνω)
            
            %a_rec(i,j)=((a(i,j)-mT(idxT,1))/sT(idxT,1))+mS(idxS,1);
            a_rec(i,j)=(sS(idxS,1)/sT(idxT,1))*(a(i,j)-mT(idxT,1))+mS(idxS,1);
            %b_rec(i,j)=((b(i,j)-mT(idxT,2))/sT(idxT,2))+mS(idxS,2); 
            b_rec(i,j)=(sS(idxS,2)/sT(idxT,2))*(b(i,j)-mT(idxT,2))+mS(idxS,2);
            
        end
    end
    
    %Ανασυνδιάζουμε τους 3 πίνακες με τις τιμές L*,α* & β* που θα μας
    %δώσουν τη τελική μας αναχρωματισμένη εικόνα (σύμφωνα με τον τύπο 
    %οι τιμές L* της τελικής εικόνας είναι ίδιες με αυτές της αρχικής)
    %και τη μετατρέπουμε σε rbg προκειμένου να μπορεί να προβληθεί με την
    %εντολή imshow()
   
    R=cat(3,L,a_rec,b_rec);
    
    R=lab2rgb(R); 
       
end

